
<html>
  <head>
    <script type="text/javascript">
      function euclidean(p1, p2) {
        var s = 0;
        for (var i = 0, l = p1.length; i < l; i++) {
          s += Math.pow(p1[i] - p2[i], 2)
        }
        return Math.sqrt(s);
      }

      function calculateCenter(points, n) {
        var vals = []
          , plen = 0;
        for (var i = 0; i < n; i++) { vals.push(0); }
        for (var i = 0, l = points.length; i < l; i++) {
          plen++;
          for (var j = 0; j < n; j++) {
            vals[j] += points[i][j];
          }
        }
        for (var i = 0; i < n; i++) {
          vals[i] = vals[i] / plen;
        }
        return vals;
      }

      function kmeans(points, k, min_diff) {
        // points is an array of 40,000 arrays.
        // Each 'point' is a pixel, and each pixel is an RGB array.
        // eg. point 1 might be [255,0,0].

        plen = points.length;
        clusters = [];
        seen = [];

        // First, let's get our clusters
        while (clusters.length < k) {
          // idx is a random point in the image
          idx = parseInt(Math.random() * plen);

          found = false;
          for (var i = 0; i < seen.length; i++ ) {
            // Don't pick the same random point twice.
            if (idx === seen[i]) {
              found = true;
              break;
            }
          }
          
          if (!found) {
            // If this is a fresh pixel, add it to 'seen' array
            seen.push(idx);
            // Also, let's create the cluster.
            // Clusters have an array containing our first point as their first element,
            // And an array of points contained in this cluster in their second.
            clusters.push([points[idx], [points[idx]]]);
          }
        }

        while (true) {
          plists = [];
          for (var i = 0; i < k; i++) {
            // Create an array of empty arrays, equal to the number of clusters we want (4)
            plists.push([]);
          }

          for (var j = 0; j < plen; j++) {
            var p = points[j]
             , smallest_distance = 10000000
             , idx = 0;
            // p becomes our RGB colour data for every pixel in the image.
            
            for (var i = 0; i < k; i++) {
              var distance = euclidean(p, clusters[i][0]);
              // Get the distance between our current p, and each cluster's centerpoint.
              if (distance < smallest_distance) {
                smallest_distance = distance;
                idx = i;
              }
            }
            // Add this point to the corresponding cluster's empty array.
            plists[idx].push(p);
          }

          // At this point, clusters is still just an array with its own point, in two arrays,
          // and plists has 4 sub-arrays each containing a bunch of points.
          // Every pixel in the image is in one of the 4 plists.

          var diff = 0;
          for (var i = 0; i < k; i++) {
            var old = clusters[i]
              , list = plists[i]
              , center = calculateCenter(plists[i], 3)
              // get the centerpoint of each cluster, and form a NEW cluster around this point, 
              // with the same list of points.
              , new_cluster = [center, (plists[i])]

              // Get the distance between our old centerpoint, and the new one.
              , dist = euclidean(old[0], center);
            
            // assign this new cluster (only change is centerpoint) to the old variable.
            clusters[i] = new_cluster

            // As long as the distance is positive, assign diff to this distance (or zero if its negative)

            diff = dist;
          }
          if (diff === 0) {
            // If this distance is less than our minimum, we're done! Otherwise, repeat.
            break;
          }
        }
        

        clusters = clusters.sort(function(a, b) { return b[1].length - a[1].length });

        // Temporary logging
        for (var i=0; i<clusters.length; i++) {
          console.log("Cluster RGB ", Math.round(clusters[i][0][0]), Math.round(clusters[i][0][1]), Math.round(clusters[i][0][2]), "Has ", clusters[i][1].length, " points");
          console.log("\n");
        }
        console.log("\n\n\n");

        return clusters;
      }

      function rgbToHex(rgb) {
        function th(i) {
          var h = parseInt(i).toString(16);
          return h.length == 1 ? '0'+h : h;
        }
        return '#' + th(rgb[0]) + th(rgb[1]) + th(rgb[2]);
      }

      function process_image(img, ctx) {
        var points = [];
        ctx.drawImage(img, 0, 0, 200, 200);
        data = ctx.getImageData(0, 0, 200, 200).data;
        for (var i = 0, l = data.length; i < l;  i += 4) {
          var r = data[i]
            , g = data[i+1]
            , b = data[i+2];
          points.push([r, g, b]);
        }
        var results = kmeans(points, 4)
         , hex = [];
        for (var i = 0; i < results.length; i++) {
          hex.push(rgbToHex(results[i][0]));
        }
        return hex;
      }

      function analyze(img_elem) {
        var ctx = document.getElementById('canvas').getContext('2d')
          , img = new Image();
        img.onload = function() {
          var results = document.getElementById('results');
          results.innerHTML = 'Waiting...';
          var colors = process_image(img, ctx)
            , p1 = document.getElementById('c1')
            , p2 = document.getElementById('c2')
            , p3 = document.getElementById('c3')
            , p4 = document.getElementById('c4');
          p1.style.backgroundColor = colors[0];
          p2.style.backgroundColor = colors[1];
          p3.style.backgroundColor = colors[2];
          p4.style.backgroundColor = colors[3];
          results.innerHTML = 'Done';
        }
        img.src = img_elem.src;
      }
    </script>
  </head>
  <body>
    <h3>Click an image below to analyze its colors</h3>
    <canvas id="canvas" style="display: none;" width="200" height="200"></canvas>
    <div>
      <p id="results">Results will be displayed here</p>
      <span id="c1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>
      <span id="c2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>
      <span id="c3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>
      <span id="c4">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>
    </div>
    <div>
      <% @images.each do |i| %>
        <%= image_tag i, onclick: 'javascript:analyze(this);', style: 'width: 250px;' %>
      <% end %>
    </div>
  </body>
</html>
